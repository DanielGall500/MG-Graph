{
  "queries": {
    "clear_graph": {
          "name": "Clear Graph",
          "query": "MATCH (n) DETACH DELETE n;",
          "desc": "Deletes all nodes and relationships from the graph."
        },
    "create_node": {
          "name": "Create Node",
          "query": "CREATE (p:{TYPE} { name: \"{NODE_LABEL_VAL}\", move: \"\" });",
          "desc": "Creates a node in a graph with variables state, node label key, and node label val."
        },
    "delete_node": {
          "name": "Delete Node",
          "query": "MATCH (p:{TYPE} { {NODE_LABEL_KEY}: \"{NODE_LABEL_VAL}\" }) DETACH DELETE p",
          "desc": "Deletes a specific node of type TYPE with a key-value pair NODE_LABEL_KEY : NODE_LABEL_VALUE."
        },
    "set_node_property": {
          "name": "Set Node Property",
          "query": "MATCH (n:{TYPE} { {NODE_LABEL_KEY}: \"{NODE_LABEL_VAL}\" }) SET n.{PROPERTY_KEY} = \"{PROPERTY_VAL}\"; ",
          "desc": "Set a property on a specific node."
        },
    "set_relationship_property": {
          "name": "Set Relationship Property",
          "query": "MATCH ()-[r]->() WHERE r.{REL_ID} = \"{REL_VAL}\" SET r.{PROPERTY_KEY} = \"{PROPERTY_VAL}\"; ",
          "desc": "Set a property on a relationship between two nodes."
        },
    "set_relationship": {
          "name": "Set Relationship Between Two Nodes",
          "query": "MATCH (a:{NODE_A_TYPE} { {NODE_A_LABEL_KEY}: \"{NODE_A_LABEL_VAL}\" }), (b:{NODE_B_TYPE} { {NODE_B_LABEL_KEY} : \"{NODE_B_LABEL_VAL}\" }) CREATE (a)-[:{REL_TYPE} { {PROPERTY_KEY}: \"{PROPERTY_VAL}\" }]->(b) RETURN a, b", 
          "desc": "Create a relationship between a node A and a node B."
        },
    "delete_relationship": {
          "name": "Delete Relationship",
          "query": "MATCH (a:{NODE_A_TYPE} { {NODE_A_LABEL_KEY}: \"{NODE_A_LABEL_VAL}\" })-[edge:{REL_TYPE} { {PROPERTY_KEY}: \"{PROPERTY_VAL}\" }]->(b:{NODE_B_TYPE} { {NODE_B_LABEL_KEY} : \"{NODE_B_LABEL_VAL}\" }) DELETE edge",
          "desc": "Delete a relationship between a node A and a node B."
        },
    "contract_edge": {
          "name": "Contract an Edge Between Two Nodes",
          "query": "MATCH (a:State { name: '{NODE_A_LABEL_VAL}' })-[e:Merge]->(b:State { name: '{NODE_B_LABEL_VAL}' }) WITH a, b, e DELETE e",
          "desc": "Given a node A and B with edge E, delete edge E and create new node from A and B"
        },
    "switch_edge_origin": {
          "name": "Switch Relationship Origins",
          "query": "MATCH (a)-[r:Merge]->(b) WHERE a.name = '{NODE_LABEL_PREV_ORIGIN}' WITH a, b, r MATCH (n { name: '{NODE_LABEL_NEW_ORIGIN}' }) CREATE (n)-[newRel: Merge { li: r.li, move: r.move }]->(b)",
          "desc": "Switches any edge origins from one node to another."
        },
    "switch_edge_endpoint": {
          "name": "Switch Relationship Origins",
          "query": "MATCH (a)-[r:Merge]->(b) WHERE b.name = '{NODE_LABEL_PREV_ENDPOINT}' WITH a, b, r MATCH (n { name: '{NODE_LABEL_NEW_ENDPOINT}' }) CREATE (a)-[newRel: Merge { li: r.li, move: r.move }]->(n)",
          "desc": "Switches any edge origins from one node to another."
        },
    "remove_redundant_nodes": {
          "name": "Remove Redundant Nodes",
          "query": "MATCH path1 = (X)-[r1]->(B)-[r2]->(Y), path2 = (X_P2)-[r1_P2]->(B_P2)-[r2_P2]->(Y_P2) WHERE X = X_P2 AND Y = Y_P2 AND B.name <> B_P2.name WITH nodes(path1) AS nodes, relationships(path1) AS rels, nodes(path2) AS nodesP2, relationships(path2) AS relsP2 UNWIND range(0, size(nodes)-2) AS idx WITH nodes[idx] AS A, nodes[idx+1] AS B, nodes[idx+2] AS C, rels[idx] AS MergeAB, rels[idx+1] AS MergeBC, nodesP2[idx+1] AS BP2, nodesP2[idx+2] AS CP2, relsP2[idx] AS MergeABP2, relsP2[idx+1] AS MergeBCP2 WITH A, B, C, MergeAB, MergeBC, BP2, CP2, MergeABP2, MergeBCP2, CASE WHEN A.move = A.move AND B.move = BP2.move AND C.move = CP2.move AND MergeAB.move = MergeABP2.move AND MergeBC.move = MergeBCP2.move AND MergeBC.li = MergeBCP2.li THEN 'Merge' ELSE 'NonRedundant' END AS merge_status WITH A, B, C, MergeAB, MergeBC, BP2, CP2, MergeABP2, MergeBCP2, merge_status, CASE WHEN B.name < BP2.name THEN B.name + '_' + BP2.name ELSE BP2.name + '_' + B.name END AS uniqueNodeName WHERE merge_status = 'Merge' AND C IS NOT NULL AND CP2 IS NOT NULL MERGE (newNode:State {name: uniqueNodeName, move: B.move}) MERGE (A)-[AB_NEW:Merge {li: MergeAB.li, move: MergeAB.move}]->(newNode) MERGE (newNode)-[BC_NEW:Merge {li: MergeBC.li, move: MergeBC.move}]->(C) MERGE (A)-[AB2_NEW:Merge {li: MergeABP2.li, move: MergeABP2.move}]->(newNode) MERGE (newNode)-[BC2_NEW:Merge {li: MergeBCP2.li, move: MergeBCP2.move}]->(C) DELETE MergeAB, MergeABP2, MergeBC, MergeBCP2 DETACH DELETE B, BP2 RETURN newNode.name, newNode.move",
          "desc": "Over the course of a state change X-Y-Z, where all movement features picked up or resolved are equal, all nodes Y may be merged."
        },
    "get_possible_paths": {
          "name": "Get All Possible Pathways",
          "query": "MATCH p = (start {name: \"{START_STATE}\"})-[*]->(end {name: \"{END_STATE}\"}) RETURN [n IN nodes(p) | n.name] AS states, [r IN relationships(p) | r.li] AS items ORDER BY length(p) ASC;",
          "desc": "Find all pathways from a start state to an end state, broken into states and merges."
        },
    "get_shortest_paths": {
          "name": "Get Shortest Possible Pathways",
          "query": "MATCH (start {name: \"{START_STATE}\"}), (end {name: \"{END_STATE}\"}) MATCH p = allShortestPaths((start)-[*]->(end)) RETURN [n IN nodes(p) | n.name] AS states, [r IN relationships(p) | r.li] AS items",
          "desc": "Find all pathways from a start state to an end state, broken into states and merges."
      }
    }
}
